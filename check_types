#include "check.h"
#include "all.h"
#include <assert.h>
//
// typecheck pass for LIR
//
// this IR isn't in tree form like the original HIR. instead, it's a simple
// SSAish with block parameters and control flow expressed as block edges.
// since LIR is essentially a flattened HIR, we'll need to identify the
// roots of each expression tree and check them as such.
//
// this pass assumes the LIR is just fresh out of the parser.
//
// 1. instruction dependencies and LIR resemble a tree, not a graph.
//    no instructions of any sub-tree can be shared with another sub-tree.
// 2. all block edges can pass 0 or 1 values, either one or the other.
//    (except for pattern matches, but those are just simple resolved flows)
// 3. the right hand side of assignments (INST_LVALUE) are always SSA locals
//
// the first point is the most important. it means that SSA locals can only
// be used once, never duplicated, they're only used in a parent expression
// once. point 2 is just a convention, point 3 makes things easier for us.
//
// what doesn't abide by this rule are user defined locals, immutable or
// mutable. they can be used as many times as they want. we need to get to
// them first before they're used in further expressions.
//
// think really, expressions in trees can only flow into 1 of 3 things:
//
// 1. unused, discarded completely
// 2. assigned to a variable
// 3. returned from a function
//
// oh yeah, im going to make a distinction here:
//
// LIR from the parser -> tree LIR
// further processing  -> SSA LIR
//
// run passes and flood fill the tree LIR with types
//
// pass 1: fill user local's initialisers
// pass 2: fill all SSA locals and identify unused roots
//

#define FOR_BLOCKS(proc, block) for (lir_rblock_t block = 0, c = arrlenu((proc)->blocks); block < c; block++)
#define FOR_INSTS(block_ptr, inst) for (u32 inst = 0, c = arrlenu((block_ptr)->insts); inst < c; inst++)

/*

// blocks with parameters > 1 are considered to be pattern matches (goto_pattern) 
// an upvalue doesn't make sense for them
type_t ctype_block_preds(lir_proc_t *proc, lir_rblock_t block, type_t arg0_upvalue) {

}

static bool is_local_in_args(lir_proc_t *proc, lir_rblock_t block, lir_rlocal_t local) {
	lir_block_t *b = &proc->blocks[block];
	for (u32 i = 0; i < arrlenu(b->args); i++) {
		if (b->args[i] == local) {
			return true;
		}
	}
	return false;
}

void ctype_inst(lir_proc_t *proc, type_t upvalue, lir_inst_t *inst) {
	switch (inst->kind) {
		case INST_INTEGER_LIT:
		case INST_BOOL_LIT:
		case INST_ARRAY:
		case INST_TUPLE_UNIT:
		case INST_TUPLE:
		case INST_UNDEFINED:
		case INST_ADD:
		case INST_SUB:
		case INST_MUL:
		case INST_DIV:
		case INST_MOD:
		case INST_EQ:
		case INST_NE:
		case ISNT_LE:
		case ISNT_LT:
		case ISNT_GE:
		case ISNT_GT:
		case INST_AND:
		case INST_OR:
		case INST_NEG:
		case INST_NOT:
		case INST_LVALUE:
		case INST_ADDRESS_OF:
		case INST_SLICE:
		case INST_CALL:
		case INST_CAST:
		case INST_SIZEOF: {
			assert_not_reached();
		}
	}

}

void ctype_local_ssa(lir_proc_t *proc, type_t upvalue, lir_rlocal_t local) {
	
	lir_local_t *l = &proc->locals[local];
	assert(l->kind == LOCAL_SSA);

	lir_rblock_t block = l->def; // SSA locals have this set
	lir_block_t *b = &proc->blocks[block];

	printf("block %u, local %u\n", block, local);

	if (is_local_in_args(proc, block, local)) {
		ctype_block_preds(proc, block, upvalue);
		assert(l->type != TYPE_INFER);
	} else {
		u32 inst_idx;
		assert((inst_idx = lir_find_inst_ssa_block(proc, block, local)) != INST_NONE);
		lir_inst_t *inst = &b->insts[inst_idx];
		ctype_inst(proc, upvalue, inst);
	}
}

// for SSA locals, only a single def
// for other locals, unify multiple defs
void ctype_local(lir_proc_t *proc, type_t upvalue, lir_rlocal_t local) {
	lir_local_t *l = &proc->locals[local];

	if (l->kind != LOCAL_SSA) {
		assert_not_reached();
	} else {
		ctype_local_ssa(proc, upvalue, local);
	}
} */

/* void cmark_block(lir_proc_t *proc, lir_rblock_t block) {
    lir_block_t *b = &proc->blocks[block];
    assert(!b->is_trivially_reachable);
    b->is_trivially_reachable = true;

    switch (b->term.kind) {
		case TERM_GOTO: {
			cmark_term(proc, block, b->term.d_goto);
			break;
		}
		case TERM_IF: {
			// if usually has ZERO arguments flowing in
			
			// TODO: ctype_local
			ctype_local(proc, TYPE_BOOL, b->term.d_if.cond);
			cmark_term(proc, block, b->term.d_if.then);
			cmark_term(proc, block, b->term.d_if.els);
			break;
		}
		case TERM_RET: {
			cmark_value(proc, block, b->term.d_ret.value);
			break;
		}
		case TERM_GOTO_PATTERN: {
			cmark_value(proc, block, b->term.d_goto_pattern.value);
			break;
		}
		default: {
			assert_not_reached();
		}
	}
} */

// check a block with a goto_pattern terminator
// filling in all the types of the param edges
void ctype_pattern(lir_proc_t *proc, lir_rblock_t block, type_t upvalue) {
	assert_not_reached();
}

void ctype_block_unify_edges(lir_proc_t *proc, lir_rblock_t block, type_t upvalue) {
	// evaluate every single edge

	lir_block_t *target = &proc->blocks[block];

	FOR_BLOCKS(proc, i) {
		lir_block_t *pred = &proc->blocks[i];

	}
}

/* type_t ctype_local(lir_proc_t *proc, type_t upvalue, lir_rlocal_t local) {
	// find where the local came from, what it is
	// if it's an SSA local, find the instruction that defines it
	// iterate recursively

	lir_local_t *l = &proc->locals[local];

	switch (l->kind) {
		case LOCAL_IMM:
		case LOCAL_MUT: {
			assert(l->is_debuginfo);
			if (l->type == TYPE_INFER) {
				err_with_pos(l->d_debuginfo.loc, "cannot infer type of local");
			}
			return l->type;
		}
		case LOCAL_SSA: {
			break;
		}
	}

	// ssa
	if (l->type != TYPE_INFER) {
		return l->type;
	}

	if (l->ssa.is_arg) {
		ctype_block_unify_edges(proc, l->ssa.def_block, upvalue);
		return l->type;
	}

	lir_rblock_t block = l->ssa.def_block;
	lir_block_t *b = &proc->blocks[block];
	u32 inst = l->ssa.def_inst;
	lir_inst_t *i = &b->insts[inst];

	switch (i->kind) {
		case INST_INTEGER_LIT: {
			l->type = TYPE_I32;
			break;
		}
		case INST_BOOL_LIT: {
			l->type = TYPE_BOOL;
			break;
		}
		default: {
			assert_not_reached();
		}
	}

	printf("local %u: %s\n", local, type_dbg_str(l->type));

	assert(l->type != TYPE_INFER);
	return l->type;
}
 */


/* void ctype_block(lir_proc_t *proc, lir_sym_t *sym, lir_rblock_t block) {
	lir_block_t *b = &proc->blocks[block];

	printf("block %u\n", block);

	// 1. run through roots in a block
	//    1. _ = discard
	//    2. a = assignment to user local
	//    3. ret out of the function
	// 2. jump to next block
	//    should be tailed actually, but we expand it in ctype_proc
	//
	FOR_INSTS(b, inst) {
		lir_inst_t *i = &b->insts[inst];

		if (i->kind == INST_DISCARD) {
			type_t d = ctype_local(proc, TYPE_INFER, i->d_discard);
			(void)d;
			printf("discarded: %s\n", type_dbg_str(d));
			// TODO: proper pure discard checks
			continue;
		}

		// use dest

		// TODO: proper lvalues
		//       need to allow %0.* = 20
		//lir_local_t *d_local;
		//if (!i->dest.is_sym && (d_local = &proc->locals[i->dest.local])->kind == LOCAL_SSA) {
		//	// user writing to a constant
		//	printf("hello %u %u %u %u\n", d_local->ssa.def_block, block, d_local->ssa.def_inst, inst);
		//	if (!d_local->ssa.is_arg && (d_local->ssa.def_block != block || d_local->ssa.def_inst != inst)) {
		//		err_with_pos(i->dest.loc, "cannot assign to constant");
		//	}
		//}
	}

	if (b->term.kind == TERM_RET) {
		// if ret_type == TYPE_INFER perform unification all around here
		type_t ret_type = type_get(sym->type)->d_fn.ret;
		type_t assumed = ctype_local(proc, ret_type, b->term.d_ret.value);
		// unify ret_type and assumed
	}
} */

type_t ctype_convert_numbers(type_t to, type_t from) {
	assert(type_is_number(to));
	assert(type_is_number(from));
	
	type_t ret;

	if (to == from) {
		return to;
	}

	bool t_si = type_is_integer(to) && type_is_signed(to);
	bool f_si = type_is_integer(from) && type_is_signed(from);
	bool t_ui = type_is_integer(to) && type_is_unsigned(to);
	bool f_ui = type_is_integer(from) && type_is_unsigned(from);

	bool t_lit = type_is_literal_number(to);
	bool f_lit = type_is_literal_number(from);

	// {integer literals} <- {signed numbers} | {unsigned numbers}
	// {float literals} <- {all numbers}

	if (t_lit) {
		if (to == TYPE_FLOAT) {
			ret = to;
			goto end;
		}

		if (to == TYPE_INTEGER && (f_si || f_ui || from == TYPE_INTEGER)) {
			ret = to;
			goto end;
		}

		return TYPE_INFER;
	}

	// signed type to signed type
	if (t_si && f_si) {
		if (to > from) {
			ret = to;
			goto end;
		}
	}

	// unsigned type to unsigned type
	if (t_ui && f_ui) {
		if (to > from) {
			ret = to;
			goto end;
		}
	}

	// from:   u8 → u16 → u32 → u64
	//            ↘     ↘     ↘
	// to:     i8 → i16 → int → i64

	// unsigned to signed, if possible
	if ((f_ui && from < TYPE_U64) && (t_si && to > TYPE_I8)) {
		ret = to;
		goto end;
	} 

	// from: f32 → to: f64

	// floats to floats
	if (from == TYPE_F32 && to == TYPE_F64) {
		ret = to;
		goto end;
	}

	// from:   i8 → i16 → int → i64
	//                        ↘     ↘
	//                          f32 → f64
	//                        ↗     ↗
	// to:     u8 → u16 → u32 → u64

	// a u32 can go into an f32
	if (to == TYPE_F32 && (f_ui && from <= TYPE_U32)) {
		ret = to;
		goto end;
	}

	// a i32 can go into an f32
	if (to == TYPE_F32 && (f_si && from <= TYPE_I32)) {
		ret = to;
		goto end;
	}

	// a u64 can go into an f64
	if (to == TYPE_F64 && (f_ui && from <= TYPE_USIZE)) {
		ret = to;
		goto end;
	}

	// a i64 can go into an f64
	if (to == TYPE_F64 && (f_si && from <= TYPE_ISIZE)) {
		ret = to;
		goto end;
	}
	
	// ! goes into everything
	if (from == TYPE_BOTTOM) {
		ret = to;
		goto end;
	}

	return TYPE_INFER;
end:
	return ret;
}

// TYPE_INFER on error
// don't call this
type_t ctype_unify_innards(type_t lhs_t, type_t rhs_t) {
	ti_kind lhs_kind = type_kind(lhs_t);
	ti_kind rhs_kind = type_kind(rhs_t);

	if (lhs_t == rhs_t) {
		return lhs_t;
	}

	// ! coerces to everything
	if (rhs_kind == TYPE_BOTTOM) {
		return lhs_t;
	}

	// ! coerces to everything
	if (lhs_kind == TYPE_BOTTOM) {
		return rhs_t;
	}

	// before undefined coercing, make sure to cuse() to ensure this is a safe unification

	// undefined coerces to everything
	if (rhs_kind == TYPE_UNDEFINED) {
		return lhs_t;
	}

	// undefined coerces to everything
	if (lhs_kind == TYPE_UNDEFINED) {
		return rhs_t;
	}

	// functions
	if (lhs_kind == TYPE_FUNCTION && rhs_kind == TYPE_FUNCTION) {
		assert_not_reached();
	}

	return TYPE_INFER;
}

// lhs_t <- rhs_t
// doesn't apply implicit casts like cunify does
type_t ctype_unify(type_t lhs_t, type_t rhs_t, loc_t onerror) {
	type_t t;
	if ((t = ctype_unify_innards(lhs_t, rhs_t)) != TYPE_INFER) {
		return t;
	}

	err_with_pos(onerror, "type mismatch: expected `%s`, got `%s`", type_dbg_str(lhs_t), type_dbg_str(rhs_t));
}

type_t ctype_cast(lir_proc_t *proc, lir_rblock_t block, type_t lhs_t, lir_rlocal_t rhs, u32 inst) {
	
}

// insert explicit casts before the instruction at idx `inst`
// uses dest lvalue
// will cast rhs to match lhs
type_t ctype_unify_cast(lir_proc_t *proc, lir_rblock_t block, type_t lhs_t, lir_rlocal_t rhs) {
	lir_local_t *l = &proc->locals[rhs];
	
	type_t rhs_t = l->type;
	ti_kind lhs_kind = type_kind(lhs_t);
	ti_kind rhs_kind = type_kind(rhs_t);

	type_t t;
	if ((t = ctype_unify_innards(lhs_t, rhs_t)) != TYPE_INFER) {
		return t;
	}

	if (type_is_number(lhs_t) && type_is_number(rhs_t)) {
		type_t lhs_c = ctype_convert_numbers(lhs_t, rhs_t);

		if (lhs_c != TYPE_INFER) {
			if (lhs_c != rhs_t) {
				// cast
				//
				// %0 = 20
				// %1 = %0 + ...      (we are here)
				//
				// %2 = 20
				// %0 = %2: i32       (splice performed)
				// %1 = %0 + ...
				
				// TODO: no casts yet
			}

			return lhs_c;
		}
	}

	assert(proc->locals[rhs].is_debuginfo);
	err_with_pos(proc->locals[rhs].d_debuginfo.loc, "type mismatch: expected `%s`, got `%s`", type_dbg_str(lhs_t), type_dbg_str(rhs_t));
}

void ctype_inst(lir_proc_t *proc, lir_rblock_t block, u32 inst_idx) {
	type_t type;

	lir_inst_t *inst = &proc->blocks[block].insts[inst_idx];

	assert(inst->kind != INST_DISCARD);

	switch (inst->kind) {
		case INST_INTEGER_LIT: {
			type = TYPE_INTEGER;
			break;
		}
		case INST_BOOL_LIT: {
			type = TYPE_BOOL;
			break;
		}
		case INST_TUPLE_UNIT: {
			type = TYPE_UNIT;
			break;
		}
		case INST_ARRAY: {
			// possibly even return TYPE_EMPTY_ARRAY just like TYPE_NONE
			assert(inst->d_array != NULL); // TODO: handle []

			// forward comments, applying upvalue shouldn't really cast anything
			// ctype_upvalue(inst->d_array[0], TYPE_INFER);
			type_t elem_type = proc->locals[inst->d_array[0]].type;

			u32 length = arrlenu(inst->d_array);

			for (u32 i = 1; i < length; i++) {
				lir_rlocal_t *inner = &inst->d_array[i];
				
				// use local
				// cuse(inner);
				// recurse and apply upvalue
				// calling ctype_upvalue(TYPE_INFER) will convert all TYPE_INTEGER/TYPE_FLOAT into proper type
				// ctype_upvalue(elem_type);

				//(void)ctype_unify_cast(proc, block, elem_type, *inner, inst_idx);
			}

		}
		case INST_TUPLE: {
		}
		case INST_UNDEFINED: {
		}
		case INST_ADD: {
		}
		case INST_SUB: {
		}
		case INST_MUL: {
		}
		case INST_DIV: {
		}
		case INST_MOD: {
		}
		case INST_EQ: {
		}
		case INST_NE: {
		}
		case ISNT_LE: {
		}
		case ISNT_LT: {
		}
		case ISNT_GE: {
		}
		case ISNT_GT: {
		}
		case INST_AND: {
		}
		case INST_OR: {
		}
		case INST_NEG: {
		}
		case INST_NOT: {
		}
		case INST_LVALUE: {
		}
		case INST_ADDRESS_OF: {
		}
		case INST_SLICE: {
		}
		case INST_CALL: {
		}
		case INST_CAST: {
		}
		case INST_SIZEOF: {
		}
		default: {
			assert_not_reached();
		}
	}

	// then assign to lvalue
}

void ctype_block(lir_proc_t *proc, lir_sym_t *sym, lir_rblock_t block) {
	lir_block_t *b = &proc->blocks[block];

	printf("block %u\n", block);

	// iterate through all instructions
	for (u32 inst = 0, len = arrlenu(b->insts); inst < len; inst++) {
		ctype_inst(proc, block, inst);

		// the code can prepend to the current instruction, be aware of that
		if (arrlenu(b->insts) > len) {
			u32 new_length = arrlenu(b->insts);
			printf("inserted %u\n", new_length - len);
			inst += new_length - len;
			len = new_length;
		}
	}

	assert_not_reached();
}

void ctype_block_chain(lir_proc_t *proc, lir_sym_t *sym, lir_rblock_t block) {
	do {
		ctype_block(proc, sym, block);
	} while((block = proc->blocks[block].check.next_sequence) != BLOCK_NONE);
}

void ctype_proc(lir_sym_t *sym, lir_proc_t *proc) {
	printf("typing\n");

	assert(type_kind(sym->type) == TYPE_FUNCTION);
	ctype_block_chain(proc, sym, 0); // entry block all the way down
}
