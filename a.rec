; add: i32 -> i32 -> i32
; add: a b = a + b
; add: a 0 = a
; add: 0 b = b
; add: 0 0 = 0
; 
; addsome: i32 -> i32
; addsome: 'xs = xs += 20
; 
; addr: i32 -> i32
; addr: x = (&x).*
; 
; select: bool -> i32 -> i32 -> i32
; select: cond a b = if (cond) a else b
; 
; selectn: bool -> i32 -> ()
; selectn: cond a = if (cond) a
; 
; eeepy: i32 -> (i32, i32)
; eeepy: x = (x, x)
; 
; main: () -> ()
; main: () = :t do
;     brk :t 50 + 50
; 
; condbrk0: bool -> i32
; condbrk0: cond = :t do
;     brk :t if (cond) 50 + 50 else 25
; 
; c: bool -> i32
; c: cond = if (cond) 50 + 50 else 25
; 
; idx_ret: i32 -> i32
; idx_ret: x = [1, 2, 3, 4, if (x) 20 else 25][x]
; 
; slice_some: i32 -> i32 -> []i32 -> []i32
; slice_some: lo hi xs = do
;     let a = xs[lo..]
;     let b = xs[..hi]
;     let c = xs[lo..hi]
;     let d = xs[..]
; 
;     ()
; 
; idx_ret0: i32 -> i32
; idx_ret0: x = [1, if (x) 2 else 2, 3][x]
; 
; call: i32 -> i32 -> i32
; call: 'f 'x = do
;     let l
;     l = (if (c) f else 1) x x x x
; 
; ssa_bug: i32 -> i32
; ssa_bug: 'x = x + (x += 1)
; 
; repeat: () -> ()
; repeat: () = :t do
;     rep :t
; 
; fact: i32 -> i32
; fact: n = if (n == 0) 1 else n * fact (n - 1)
; 
; fact_iter: i32 -> i32
; fact_iter: 'i = do
;     let 'f = 1
;     loop do
;         if (i < 1) brk f
;         f = f * i
;         i--
; 
; test: () -> ()
; test: () = loop ret ()
; 
; fact_full: i32 -> i32
; fact_full: n = do
;     if (n == 0) do
;         ret 1
;     else do
;         ret n * fact_full (n - 1)
; 
; inc_double: (i32, i32) -> (i32, i32)
; inc_double: (x, y) = (inc x, inc y)
; 
; ident: i32 -> i32
; ident: x = x
; 
; inc: i32 -> i32
; inc: x = ident x + 1
; 
; fear: u8 -> u8
; fear: a = loop brk a
; 
; fer: u8 -> u8
; fer: a = :t do
;     a
;     a
; 
; arre: i32 -> []i32
; arre: t = :t do
;     let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
;     [1, 2, 3]
; 
; dec_loop: i32 -> i32
; dec_loop: 'x = loop do
;     x--
;     brk x
; 
; far: () -> i32
; far: () = :t do
;     brk :t 20
;     40
; 
; aar: i32 -> i32 -> i32
; aar: f x = :k do
;     let g = 20
;     g
; 
; inc_double((x: i32, y: i32)) -> (i32, i32)
; 
; test1 = test0
; test0 = test1
; 
; ; test = teeeeeeeeees
; ; test0 = test1
; ; test1 = test0
; ; obvious_cycle = 50 + obvious_cycle
; ; intrusive: *i32 = &intrusive
; 
; inc_double(t: (i32, i32)) -> (i32, i32) = (inc t.0, inc t.1)
; 
; ident(x: i32) -> i32 = x
; 
; inc(x: i32) -> i32 = ident x + 1
; 
; F() = 0
; 
; struct Foo {
;     x: i32
;     y: F
; }
; 
; take(a: Foo) = 0
; 
; struct Test0 {
;     a: Test1
; }
; 
; struct Test1 {
;     a: Test0
; }
; 
; test1 = test0
; test0 = test1
; 
; ; use func(): T instead of func() -> T ????
; 
; struct T {
;     b: Eeer
; }
; 
; func() -> NotReal = 0
; 
; func() = do
;     let t: NotReal =  20: Fard
; 
; not_existing: NonExisting = 0
; 
; F() = 0
; 
; struct Foo {
;     x: i32
;     y: F
; }
; 
; global: funcer = 0
; 
; funcer() -> global = 0
; 
; struct T {}
; 
; glob = T
; 
; selfrec = &selfrec[selfrec]
; selfrec = &selfrec[&selfrec]
; 
; struct Foo {
;     x: i32
;     y: *Foo
; }
; 
; selfcall() -> () = selfcall
; 
; fact(t: i32) -> i32 =
;     if (t == 0) 1 else t * fact (t - 1)
; 
; mutrec0() = mutrec1
; mutrec1() -> () = mutrec2
; mutrec2() = mutrec0
; 
; struct Test0 {
;     a: Test1
; }
; 
; struct Test1 {
;     a: Test2
; }
; 
; struct Test2 {
;     a: *Test0
; }
; 
; test = &test
; 
; global = void :t do
;     29
;     29
;     29
;     29
; 
; factacc(n: i32) = factacc0 n 1
; 
; factacc0(n: i32, acc: i32): i32 =
;     if (n <= 1) acc else factacc0 (n - 1) (n * acc)
; 
; maine(v': i32) = void do
;     v++
;     v++
;     v++
;     v++
;     v++
;     v++
; 
; unpackadd(a: (i32, i32)) = a.0 + a.1
; 
; struct Foo {
;     x: i32
;     y: i32
; }
; 
; unpackfoo(a: Foo) = a.x + a.y
; 
; main() = do
;     let (a', b) = (1, 2)
;     a = 40
;     a
; 
; f() = 20 + ret 5 + ret 255
; 
; f(v': i32) = (v = 50) + ret v
; 
; f(c: bool) = if (c) 250 else 12

; factacc(n: i32) = factacc0 n 1
; 
; factacc0(n: i32, acc: i32): i32 =
;     if (n <= 1) acc else factacc0 (n - 1) (n * acc)

; main() = do
;     50
;     60
;     23

; factacc(n: i32) = factacc0 n 1
; 
; factacc0(n: i32, acc: i32): i32 =
;     if (n <= 1) acc else factacc0 (n - 1) (n * acc)

; not_allowed() = 20:!

; fact_iter(i': i32) = do
;     let f' = 1
;     loop do
;         if (i < 1) brk f
;         f = f * i
;         i--

; fact_full(n: i32): i32 = do
;     if (n == 0) ret 1
;     else ret n * fact_full (n - 1)
; 
; unitmaker(c: bool) = if (c) () else ()

; repeat() = :t do
;     rep :t

; struct T {
;     count: i32
; }
; 
; new(): T = T{}
; 
; incv_lit(v: T): T = T{}
; 
; incv_field(v': T): T = do
;     v.count++
;     v

; cond(c: bool) = :t do
;     if (c) brk :t 20
; 
;     if (!c) 40 else 2

; dostuffs() = do
;     let a = :t do
;         brk :t 50
;     8

; expr_forwarding(c: bool) = do
;     let a = if (c) (if (c) 120 else 23) else 59
;     a

; fact_iter_forwarding(i': i32) = do
;     let f' = 1
;     let take = loop do
;         if (i < 1) brk f
;         f = f * i
;         i--
;     take

; do_forwarding(c: bool) = do
;     let take = :t do
;         if (c) brk :t 20
;         240
;     take
; 
; do_forwarding_discard(c: bool) = do
;     let _ = :t do
;         if (c) brk :t 20
;         240
;     50
; 
; if_forwarding_discard(c: bool) = do
;     let t = if (c) () else ()
;     50

; local = hir.local_new desc hir.local_t{
;     name: none
;     kind: .imm
;     type: loop_type
;     loc: none
; }

; loop_forwarding_i32(c': i32) = do
;     loop do
;         if (c <= 0) brk c
;         c--

; ret_forwarding(c: bool) = do
;     ret :t do
;         if (c) brk :t 230
;         40

; access(k: usize, xs: []i32): i32 = xs[k]

; from(i': i32) = do
;     i += 3 + 50

; from_lvalue(i: []i32): () = do
;     let k': usize = 0
;     let g'                ; `let g; g = ...` doesn't work as it's a current limitation
; 
;     i[g = k++] = 0

; unit() = ()
; 
; takers(a: (), b: i32, c: ()) = b
; 
; users() = do
;     takers unit 40 unit

; loopin() = loop ()
; 
; along_us() = do
;     let a = loopin
;     a

; from_lvalue(i: []i32): () = do
;     let k': usize = 0
;     let g'
; 
;     i[g = k++] = 0

; struct Foo {
;     x: i32
;     y: i32
; }
; 
; make_foo() = Foo{x: 20}

; Foo{x: 20}
; Foo{20, 50}

; type Alias = i32
; 
; ret_alias(): Alias = 20:Alias

; type Sum = u32 | i32

; struct Foo {
;     x: i32
; }
; 
; Foo.incr(a: Foo, b: i32, c: i32) = b
; Foo.voider(a: Foo) = ()
; Foo.static(a: i32) = a
; 
; main() = do
;     let a = Foo{x: 20}
;     
;     a.incr 20 50
;     Foo.incr a 20 50
;     
;     a.voider
;     Foo.voider a
; 
;     Foo.static 20
; 
; main(): () = do
;     let k = &main
;     k
; 
; ; TODO: normalisation remove `()` in `(): i32`
; ; TODO: ambiguity `(i32, i32): i32` going to args = `(i32, i32)` not 1 argument tuple
; struct Taker {
;     a: () -> i32
; }
; 
; ; curries: i32: i32: i32: ()
; taker(b: Taker) = b.a ()

; struct Foo {
;     x: i32
; }
; 
; main() = do
;     ; let f = Foo{230}
;     let f = Foo{x: 230}
;     let k = f.x
;     k
; 
; ; globl0 = Foo{230}
; globl1 = Foo{x: 230}

; struct T {
;     v: (): i32
; }
; 
; taker(b: T) = b.v

; main0() = {
;     20
; }
; 
; main1() {
;     20
; }

; struct T {
;     a: bool
;     b: i32
;     c: u8
; }
; 
; main() = {
;     let t = T{a: true, b: 20, c: 50}
;     t
; }

; factorial = {
;     let i' = 6
;     let f' = 1
;     let take = loop {
;         if (i < 1) brk f
;         f = f * i
;         i--
;     }
;     take
; }

; global = {
;     let a = 35
;     a + 50
; }

; i8min: i8 = -128
; i8max: i8 = 127
; i16min: i16 = -32768
; i16max: i16 = 32767
; i32min: i32 = -2147483648
; i32max: i32 = 2147483647
; i64min: i64 = -9223372036854775808
; i64max: i64 = 9223372036854775807
; 
; u8min: u8 = 0
; u8max: u8 = 255
; u16min: u16 = 0
; u16max: u16 = 65535
; u32min: u32 = 0
; u32max: u32 = 4294967295
; u64min: u64 = 0
; u64max: u64 = 18446744073709551615

; import mod
; 
; main() {
;     let k = mod.factacc 0
;     ; let v: mod.Test
; }

; TODO: C type for `*c_int` instead of `*i32`

; extern "__errno_location" errno_ptr(): *i32
; extern global: i32
; extern "_start" mystart() = 20

; import factorial
; 
; pub main() {
;     factorial.factacc 6
; }

; fort(v: i32, k: i32) = v
; 
; pub main() {
;     fort 2 { 20 }
; }

;                  'this as comment?
; TODO: can't unify (u32 + u64), need to perform commutative operation on both types
;
; KiB = 1024: u64
; MiB = 1024 * KiB

; KiB = 1024: u64
; MiB = KiB * 1024
; GiB = MiB * 1024
; TiB = GiB * 1024
; PiB = TiB * 1024

; TODO: u64max: i32 = 18446744073709551615

; pub main(): ! = loop ()

; TODO: raise error on the users side for non pub

; test = 4
; 
; pub main() {
;     let a: [2 + 2]i32 = [1, 2, 3, 4]
;     let b: [test]i32 = [1, 2, 3, 4]
; }

; extern exit(status: i32): !
; 
; test(a: i32) = a + 50
; 
; k = test 50
; 
; pub main() {
;     exit 20
; }

extern exit(status: i32): !

pub main() {
    let k = factor
    exit k
}

factor = {
    let i' = 6
    let f' = 1
    let take = loop do
        if (i < 1) brk f
        f = f * i
        i--
    take
}