#include "all.h"
#include "check.h"

// TODO: before commit, introduce back discard instructions

#define FOR_STB(arr, i) for (u32 i = 0, c = arrlenu(arr); i < c; i++)
#define FOR_BLOCKS(proc, block) for (lir_rblock_t block = 0, c = arrlenu((proc)->blocks); block < c; block++)
#define FOR_INSTS(block, inst) for (u32 inst = 0, c = arrlenu((proc)->blocks[block].insts); inst < c; inst++)

typedef struct ctyctx_t ctyctx_t;
typedef struct ctyctx_ent_t ctyctx_ent_t;

// TODO: on a write to a region that contains either `local` or `sym`
//       the cached read needs to be undone
//
//       can be implemented by inserting a discard entry
//       which replicates itself on merge
//
// INFO: implemented as TYPE_INFER meaning poisoned
struct ctyctx_ent_t {
	rlocal_t local;
	rsym_t sym;
	bool is_sym;
	type_t sccp_type; // TYPE_INFER meaning poisoned
};

struct ctyctx_t {
	ctyctx_t *parent; // NULL for proc
	ctyctx_ent_t *entries;
};

// we aren't including lattice types inside the type system
// i don't want to do it. it complicates things.

/* 
// TYPE_LITERAL_INT,   // 20
// TYPE_LITERAL_FLOAT, // 20.5
// TYPE_LITERAL_ARRAY, // []
// TYPE_LITERAL_TUPLE, // (...)         (not empty)
// TYPE_LITERAL_BOOL,  // false
// TYPE_LITERAL_NONE,  // none
struct {
	i64 min, max;
} d_literal_int;
struct {
	// maybe like, store NaN or ranges?
} d_literal_float;
struct {
	type_t *elems; // list of literals | type, [1..2, 4, 5, i32, 6]
} d_literal_array;
struct {
	type_t *elems; // list of literals | type, same as tuple
} d_literal_tuple;
bool d_literal_bool;
// d_literal_none;
 */

// TODO: currently, don't store any lattice information for locals all
//       the setup is currently in `ctyctx_t`, just don't do it yet

// TODO: implement GVN with respect to poisoning/region invalidations

type_t ctype_lvalue(lir_proc_t *proc, lir_lvalue_t lvalue) {
	type_t underlying;
	
	if (!lvalue.is_sym) {
		local_t *l = &proc->locals[lvalue.local];
		underlying = l->type;

		assert(l->is_debuginfo);
		if (underlying == TYPE_INFER) {
			err_with_pos(l->d_debuginfo.loc, "cannot infer type of local");
		}
	} else {
		underlying = symbols[lvalue.symbol].type;
	}


	FOR_STB(lvalue.proj, i) {
		lir_lvalue_proj_t *proj = &lvalue.proj[i];

		// unimplemented
		assert_not_reached();
	}

	return underlying;
}

void ctype_insts(lir_proc_t *proc, lir_rblock_t block) {
	lir_block_t *b = &proc->blocks[block];

	FOR_INSTS(block, i) {
		lir_inst_t *inst = &b->stmts[i];

		type_t rhs;

		// TODO: later on perform fixups with assign proper types to literals

		switch (inst->kind) {
			case INST_INTEGER_LIT: {
				rhs = TYPE_INT_LITERAL;
				break;
			}
			case INST_BOOL_LIT: {
				rhs = TYPE_BOOL;
				break;
			}
			case INST_LVALUE: {
				rhs = ctype_lvalue(proc, inst->d_lvalue);
				break;
			}
			case INST_TUPLE_UNIT: {
				rhs = TYPE_TUPLE;
				break;
			}
			case INST_ARRAY:
			case INST_ADD:
			case INST_SUB:
			case INST_MUL:
			case INST_DIV:
			case INST_MOD:
			case INST_EQ:
			case INST_NE:
			case ISNT_LE:
			case ISNT_LT:
			case ISNT_GE:
			case ISNT_GT:
			case INST_AND:
			case INST_OR:
			case INST_NEG:
			case INST_NOT:
			case INST_ADDRESS_OF:
			case INST_SLICE:
			case INST_CALL:
			case INST_CAST:
			case INST_SIZEOF:
			default: {
				assert_not_reached();
			}
		}

		if (inst->lvalue_dest && inst->dest.lvalue.is_sym) {
			assert_not_reached();
		} else if (inst->lvalue_dest) {
			local_t *l = &proc->locals[inst->dest.lvalue.local];
			if (l->type == TYPE_INFER) {
				l->type = rhs;
			} else {
				(void)ctype_unify(l->type, rhs, inst->d_lvalue.loc);
			}
		} else {
			local_t *l = &proc->locals[inst->dest.ssa];
			l->type = rhs;
		}
	}
}

void ctype_block(lir_proc_t *proc, lir_rblock_t block) {
	lir_block_t *b = &proc->blocks[block];

	printf("block %u (", block);

	for (u32 i = 0, c = arrlenu(b->args); i < c; i++) {
		rlocal_t input = b->args[i];
		printf("%u: %s", input, type_dbg_str(proc->locals[input].type));
		if (i + 1 < c) {
			printf(", ");
		}
	}
	printf(")\n");

	ctype_insts(proc, block);

	switch (b->term.kind) {
		case TERM_GOTO: {
			// collate inputs
			ctype_block(proc, b->term.d_goto.block);
			break;
		}
		case TERM_RET: {
			
		}
		case TERM_GOTO_PATTERN: {
			// collate inputs
			assert_not_reached();
			
			// visit the blocks down the chain on branches
			FOR_STB(b->term.d_goto_pattern.blocks, i) {
				lir_rblock_t branch = b->term.d_goto_pattern.blocks[i];
				//ctype_block_visit(proc, branch);
			}
			break;
		}
		default: {
			assert_not_reached();
		}
	}
}

void ctype_block_visit_po_dfs(lir_proc_t *proc, lir_rblock_t **po, lir_rblock_t block) {
	lir_block_t *b = &proc->blocks[block];

	b->visited = true;

	// visit the successors
	switch (b->term.kind) {
		case TERM_GOTO: {
			if (proc->blocks[b->term.d_goto.block].visited) {
				break;
			}
			ctype_block_visit_po_dfs(proc, po, b->term.d_goto.block);
			break;
		}
		case TERM_GOTO_PATTERN: {
			FOR_STB(b->term.d_goto_pattern.blocks, i) {
				lir_rblock_t branch = b->term.d_goto_pattern.blocks[i];
				if (proc->blocks[branch].visited) {
					continue;
				}
				ctype_block_visit_po_dfs(proc, po, branch);
			}
			break;
		}
		case TERM_RET: break;
		default: {
			assert_not_reached();
		}
	}

	arrpush(*po, block);
}

void ctype_proc(sym_t *sym, lir_proc_t *proc) {
	printf("typing %s\n", sv_from(sym->key));

	assert(type_kind(sym->type) == TYPE_FUNCTION);

	// compute postorder, then traverse reversed
	lir_rblock_t *po = NULL;
	ctype_block_visit_po_dfs(proc, &po, 0);

	// RPO
	for (u32 i = arrlenu(po); i-- > 0;) {
		lir_rblock_t block = po[i];
		ctype_block(proc, block);
	}

	// TODO: then process blocks that aren't visited, set their arguments to !
}